<!doctype html>
<hmtl>
    <head>
        <% include partials/resources.ejs %>
        <title> Testseite </title>
    </head>
    <body>
    <% include partials/navigation.ejs %>
    <% include partials/header.ejs %>
    <main>
        <div class="online-users">
            Zur Zeit sind online:
            <ul id="user-list" class="undecorated">
            <% var users = room.users.sort(function(a,b){ return a.localeCompare(b)}); %>
            <% for(var i = 0; i < users.length; i++){ %>
                <li> <%= users[i]%> </li>
            <% } %>
            </ul>
        </div>
        <div class="video-streams">
            <ul id="video-list" class="undecorated">

            </ul>
        </div>
        <div class="video-control">
            <button type="button" id="call-button" class="button"> Anrufen </button>
        </div>
        <div class="chat-messages">
            <ul id="message-list" class="undecorated">

            </ul>
        </div>
        <div>
            <input type="text" placeholder="Nachricht (Enter)" class="textinput" id="message-field">
        </div>
    </main>
    <script>
        (function(){
        var url = 'ws://<%= server.address %>:<%= server.port %>/chat/<%=room.id%>';
        var user = '<%= user %>';
        var roomId = '<%= room.id%>';
        var peerConnections = {};
        var socketConnection = io();
        var createMessage = function(message){
            return {'user': user, 'message': message, time: new Date(), room: roomId}
        };
        var negotiating
        var calling = function(caller){
            if(!caller) caller = user;
            // create a peer connection
            peerConnections[user] = rtcHelperFunctions.createPeerConnection();
            var peerConnection = peerConnections[user];

            // handle peer connection stuff
            peerConnection.onaddStream = function(event){
                var video = htmlHelper.appendVideoOnList(list,Math.random().toString(32).substring(2,8));
                htmlHelper.setStreamOfVideo(video, event.streams[0]);
            };

            // check if currently negotiating
            peerConnection.onsignalingstatechange = function(){
                negotiating = peerConnection.signalingState !== "stable";
            }

            peerConnection.onnegotiationneeded = function(){
                if(negotiating) return;
                // create an offer and send it to the peer
                rtcHelperFunctions.createLocalOffer(peerConnection)
                    .then(function(sdp){
                        var sdpMessage = createMessage(sdp);
                        socketConnection.emit('sdp-message', sdpMessage);
                    }).catch(console.log);
            }

            peerConnection.onicecandidate = function(event){
                if(event.candidate){
                    var candidateMessage = createMessage(event.candidate);
                    socketConnection.emit('ice-message',candidateMessage);
                }
            };

            return peerConnection;
        };

        // handle Socket stuff (chatting, real time data transfer to the server...)
        socketConnection.on('connect', function(){
            var welcome = createMessage("the user <%= user %> entered the room <%= room.name %>");
            socketConnection.emit('enter-message', welcome);
        });

        socketConnection.on('error', function(event){
            console.log(event.data);
        });

        socketConnection.on('user-message', function(data){
            htmlHelper.appendMessageOnList('#message-list', data.message, data.user, data.time);
        });

        socketConnection.on('enter-message', function(data){
            htmlHelper.appendMessageOnList('#message-list',data.message, data.user, data.time);
            htmlHelper.setUsersOnList('#user-list', data.users);
        });

        socketConnection.on('leave-message', function(data){
            htmlHelper.appendMessageOnList('#message-list',data.message, data.user, data.time);
            htmlHelper.setUsersOnList('#user-list', data.users);
        });

        socketConnection.on('sdp-message', function(data){
            if(data.user === user) return;
            if(data.message.type === "offer"){
                rtcHelperFunctions.getCameraStream().then(function(stream){
                    var peerConnection = calling(data.user);
                    peerConnection.addStream(stream);
                    rtcHelperFunctions.handleRemoteOffer(peerConnection, data.message)
                        .then(function (sdp) {
                            console.log('created sdp answer',sdp);
                            var sdpMessage = createMessage(sdp);
                            socketConnection.emit('sdp-message', sdpMessage);
                        }).catch(console.log);
                });
            }else if(data.message.type === "answer"){
                var peerConnection = peerConnections[user];
                rtcHelperFunctions.handleRemoteAnswer(peerConnection, data.message)
                    .then(function(){
                        console.log('set remote answer')
                    }).catch(console.log)
            }

        });

        socketConnection.on('ice-message', function(data){
            if(data.user === user) return;
            peerConnections[user].addIceCandidate(new RTCIceCandidate(data.message))
                .then(function(){
                    console.log('added candidate',data.message);
                }).catch(console.log);
        });


        // bind events on input elements
        $('#message-field').on('keypress', function(event){
            if(event.which === 13 && this.value && this.value.trim()){
                var userMessage = createMessage(this.value.trim());
                socketConnection.emit('user-message', userMessage);
                this.value = "";
            }
        });

        $('#call-button').on('click', function(){
            rtcHelperFunctions.getCameraStream()
                .then(function(stream){
                    var peerConnection = calling();
                    // add the local stream to the peer connection
                    peerConnection.addStream(stream);

                    // create SDP offer
                })
                .catch(console.log);
        });

        $(window).on('beforeunload', function(){
            var bye = createMessage("user <%= user %> has left the room <%= room.name %>");
            socketConnection.emit('leave-message', bye);
        })

        })();
    </script>
    </body>
</hmtl>